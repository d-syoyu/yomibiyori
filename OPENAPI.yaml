openapi: 3.1.0
info:
  title: Yomibiyori API
  version: 1.0.0
  description: >
    Yomibiyori is a poetic social network where people compose verses with AI.
    This document lists the REST API endpoints that are currently implemented.
servers:
  - url: https://api.yomibiyori.app/api/v1
    description: Production
  - url: http://localhost:8000/api/v1
    description: Local Development
paths:
  /auth/signup:
    post:
      tags: [auth]
      summary: Sign up via Supabase
      description: >
        Proxy Supabase Auth sign up and synchronise the resulting user with the local database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '400':
          description: Supabase rejected the sign-up request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Local email conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Supabase service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/oauth/google:
    get:
      tags: [auth]
      summary: Get Google OAuth authorization URL
      description: >
        Returns the Supabase Auth Google OAuth URL for client-side redirect flow.
        Client should redirect to this URL, and after successful authentication,
        Supabase will redirect back with access_token and refresh_token in the URL fragment.
      parameters:
        - name: redirect_to
          in: query
          required: false
          description: Optional redirect URL after authentication
          schema:
            type: string
      responses:
        '200':
          description: Google OAuth authorization URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthUrlResponse'
        '503':
          description: Supabase service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/oauth/callback:
    post:
      tags: [auth]
      summary: Process OAuth callback and sync user
      description: >
        Accept access_token from OAuth callback, verify it with Supabase, and synchronise
        the user to the local database. This endpoint is optional - clients can also directly
        use the tokens and call /auth/profile/sync.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthCallbackRequest'
      responses:
        '200':
          description: OAuth authentication successful and user synchronized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthCallbackResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Supabase service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/profile:
    get:
      tags: [auth]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Local profile for the authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Profile not found locally
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags: [auth]
      summary: Update user profile
      description: Update the authenticated user's profile (e.g., display name)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/profile/sync:
    post:
      tags: [auth]
      summary: Synchronise profile from Supabase
      description: >
        Fetch the Supabase Auth record using the service role key and update the local profile.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Synchronised profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Supabase user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Supabase service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-reset:
    post:
      tags: [auth]
      summary: Request password reset email
      description: >
        Request Supabase to send a recovery email. Returns success even if the address is not registered.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset email dispatched (or silently ignored)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
        '400':
          description: Supabase rejected the reset request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Supabase service unreachable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-update:
    post:
      tags: [auth]
      summary: Update password with access token
      description: >
        Update the authenticated user's password by forwarding the request to Supabase Auth.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePasswordResponse'
        '400':
          description: Supabase rejected the password update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          description: Supabase service unreachable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-update-with-token:
    post:
      tags: [auth]
      summary: Verify recovery token and update password
      description: >
        Accept a recovery token (token_hash or access_token) from the password reset email, verify it with
        Supabase, and update the password without requiring an authenticated session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTokenAndUpdatePasswordRequest'
      responses:
        '200':
          description: Password updated through recovery flow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePasswordResponse'
        '400':
          description: Supabase rejected the token or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Supabase service unreachable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /works:
    post:
      tags: [works]
      summary: Submit a work (lower verse / 下の句)
      description: >
        Authenticated users can submit one lower verse (shimo-no-ku, 7-7 syllables) per category
        and per day while the submission window is open. The lower verse should continue the
        upper verse (kami-no-ku, 5-7-5 syllables) provided by the theme to form a complete tanka (5-7-5-7-7)
        between 06:00 and 22:00 JST.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkCreate'
      responses:
        '201':
          description: Work accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Work'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/SubmissionWindowClosed'
        '409':
          description: Duplicate submission for this category today
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                alreadySubmitted:
                  value:
                    detail: You have already submitted a work today for this category
    get:
      tags: [works]
      summary: List works for a theme
      description: Returns works linked to the supplied theme ordered by recency or fair score.
      parameters:
        - name: theme_id
          in: query
          required: true
          description: Theme identifier
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to return (1-200)
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 200
        - name: order_by
          in: query
          description: Sort order. Use `recent` (default) or `fair_score`.
          schema:
            type: string
            enum: [recent, fair_score]
            default: recent
      responses:
        '200':
          description: List of works
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Work'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /works/me:
    get:
      tags: [works]
      summary: List works by authenticated user
      description: Returns works created by the authenticated user with optional theme filter.
      security:
        - bearerAuth: []
      parameters:
        - name: theme_id
          in: query
          required: false
          description: Optional theme identifier to filter works
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of works to return (1-200)
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 200
        - name: offset
          in: query
          required: false
          description: Number of works to skip before returning results
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Works created by the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Work'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /works/me/summary:
    get:
      tags: [works]
      summary: Get work summary grouped by date
      description: Returns a breakdown of the authenticated user's works grouped by theme date with totals.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Summary of works grouped by date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkDateSummary'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /works/{work_id}/like:
    post:
      tags: [works]
      summary: Send gratitude (like) to a work
      description: Register a like for a work on behalf of the authenticated user.
      security:
        - bearerAuth: []
      parameters:
        - name: work_id
          in: path
          required: true
          description: Work identifier
          schema:
            type: string
      responses:
        '200':
          description: Like recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkLikeResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Work not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Like already registered by this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /works/{work_id}/impression:
    post:
      tags: [works]
      summary: Record impression for a work
      description: >
        Track viewing events for a work to align Redis-backed ranking metrics. The optional viewer hash lets
        clients de-duplicate impressions without exposing raw identifiers, and contributes to unique viewer counts.
      parameters:
        - name: work_id
          in: path
          required: true
          description: Work identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkImpressionRequest'
      responses:
        '200':
          description: Impression recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkImpressionResponse'
        '404':
          description: Work not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /themes/today:
    get:
      tags: [themes]
      summary: Get today's theme (upper verse / 上の句)
      description: >
        Return today's theme (upper verse in 5-7-5 format) for the current date in JST timezone.
        Users will create lower verses (7-7) to continue this theme and form a complete tanka.
        If a category is specified, returns the theme for that category. If no category is
        specified and multiple themes exist for different categories, returns the most recent.
      parameters:
        - name: category
          in: query
          required: false
          description: Category filter (e.g., '恋愛', '季節', '日常', 'ユーモア')
          schema:
            type: string
          example: 恋愛
      responses:
        '200':
          description: Today's theme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
        '404':
          description: No theme found for today (or specified category)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ranking:
    get:
      tags: [ranking]
      summary: Retrieve ranking for a theme
      description: >
        Fetch ranking entries using Redis metrics when available (time-normalised fairness score),
        otherwise fall back to the persisted snapshot stored in PostgreSQL.
      parameters:
        - name: theme_id
          in: query
          required: true
          description: Theme identifier
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to return (1-100)
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Ranking entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankingEntry'
        '404':
          description: No ranking data for the theme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    SubmissionWindowClosed:
      description: Submission window closed (22:00–06:00 JST)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            windowClosed:
              value:
                detail: Submissions are closed between 22:00 and 06:00 JST
  schemas:
    WorkCreate:
      type: object
      required:
        - theme_id
        - text
      properties:
        theme_id:
          type: string
          description: Theme identifier to respond to
        text:
          type: string
          maxLength: 40
          minLength: 1
          description: >
            Lower verse (下の句) text, ideally 7-7 syllables to continue the theme's upper verse.
            Limited to 40 characters. User creativity is respected; syllable validation is not enforced
    Work:
      type: object
      required:
        - id
        - user_id
        - theme_id
        - text
        - created_at
        - likes_count
        - display_name
      properties:
        id:
          type: string
        user_id:
          type: string
        theme_id:
          type: string
        text:
          type: string
          maxLength: 40
          description: Lower verse (下の句) text
        created_at:
          type: string
          format: date-time
        likes_count:
          type: integer
          minimum: 0
        display_name:
          type: string
          description: Display name of the author
    WorkLikeResponse:
      type: object
      required:
        - status
        - likes_count
      properties:
        status:
          type: string
          enum: [liked]
        likes_count:
          type: integer
          minimum: 0
    WorkImpressionRequest:
      type: object
      properties:
        viewer_hash:
          type: string
          description: Optional SHA-256 hash representing the viewer (hex encoded)
          minLength: 64
          maxLength: 64
          pattern: '^[0-9a-fA-F]{64}$'
        count:
          type: integer
          description: Number of impressions to add for this event
          default: 1
          minimum: 1
          maximum: 20
    WorkImpressionResponse:
      type: object
      required:
        - status
        - impressions_count
        - unique_viewers_count
      properties:
        status:
          type: string
          enum: [recorded]
        impressions_count:
          type: integer
          minimum: 0
        unique_viewers_count:
          type: integer
          minimum: 0
          description: Approximate unique viewer count derived from hashed identifiers
    WorkDateSummary:
      type: object
      required:
        - date
        - works_count
        - total_likes
      properties:
        date:
          type: string
          format: date
          description: Theme date in JST
        works_count:
          type: integer
          minimum: 0
        total_likes:
          type: integer
          minimum: 0
    SignUpRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 128
        display_name:
          type: string
          maxLength: 80
    SessionToken:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
          nullable: true
        token_type:
          type: string
          enum: [bearer]
        expires_in:
          type: integer
          nullable: true
    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    PasswordResetResponse:
      type: object
      properties:
        message:
          type: string
          example: パスワード再設定メールを送信しました
    UpdatePasswordRequest:
      type: object
      required:
        - new_password
      properties:
        new_password:
          type: string
          minLength: 8
          maxLength: 128
    UpdatePasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: パスワードを更新しました
    UpdateProfileRequest:
      type: object
      properties:
        display_name:
          type: string
          maxLength: 80
          minLength: 1
          description: New display name for the user
    VerifyTokenAndUpdatePasswordRequest:
      type: object
      required:
        - access_token
        - new_password
      properties:
        access_token:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 8
          maxLength: 128
    OAuthUrlResponse:
      type: object
      required:
        - url
        - provider
      properties:
        url:
          type: string
          format: uri
          description: OAuth authorization URL to redirect the user to
        provider:
          type: string
          enum: [google]
          description: OAuth provider name
    OAuthCallbackRequest:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          minLength: 1
          description: Access token from OAuth callback
        refresh_token:
          type: string
          description: Optional refresh token from OAuth callback
    OAuthCallbackResponse:
      type: object
      required:
        - user_id
        - email
      properties:
        user_id:
          type: string
        email:
          type: string
          format: email
        display_name:
          type: string
          nullable: true
        session:
          $ref: '#/components/schemas/SessionToken'
    SignUpResponse:
      type: object
      required:
        - user_id
        - email
      properties:
        user_id:
          type: string
        email:
          type: string
          format: email
        display_name:
          type: string
          nullable: true
        session:
          $ref: '#/components/schemas/SessionToken'
    UserProfileResponse:
      type: object
      required:
        - user_id
        - email
      properties:
        user_id:
          type: string
        email:
          type: string
          format: email
        display_name:
          type: string
          nullable: true
    RankingEntry:
      type: object
      required:
        - rank
        - work_id
        - score
        - display_name
        - text
      properties:
        rank:
          type: integer
          minimum: 1
        work_id:
          type: string
        score:
          type: number
          description: Time-normalized fairness score (higher is better)
        display_name:
          type: string
          description: Display name of the author
        text:
          type: string
    ThemeResponse:
      type: object
      required:
        - id
        - text
        - category
        - date
        - sponsored
        - created_at
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
          description: >
            Theme text (upper verse / 上の句) in 5-7-5 syllable format.
            Users will create lower verses (7-7) to complete the tanka
        category:
          type: string
          description: Theme category
          example: 恋愛
        date:
          type: string
          format: date
          description: Date this theme is for (YYYY-MM-DD)
        sponsored:
          type: boolean
          description: Whether this is a sponsored theme
        created_at:
          type: string
          format: date-time
          description: Timestamp when theme was created
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
