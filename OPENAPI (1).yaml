openapi: 3.1.0
info:
  title: 詠日和 API
  version: "1.0.0"
  description: |
    詠日和（よみびより）は、AIが上の句を提示し、人が下の句で応える“詩的SNS”です。
    本ドキュメントはFastAPIに準拠したREST API仕様を示します。

servers:
  - url: https://api.yomibiyori.app/v1
    description: Production
  - url: http://localhost:8000/v1
    description: Local Development

paths:
  /auth/signup:
    post:
      summary: ユーザー登録
      description: Supabase Auth連携で新規ユーザーを登録します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required: [email, password]
      responses:
        "201":
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /themes/today:
    get:
      summary: 本日のお題を取得
      description: 当日6:00に解禁された上の句を返します。
      responses:
        "200":
          description: お題情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"

  /works:
    post:
      summary: 下の句を投稿
      description: ログインユーザーが本日のお題に対して1首を投稿します。
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: 下の句本文（100文字以内）
              required: [text]
      responses:
        "201":
          description: 投稿成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Work"
        "409":
          description: 既に本日投稿済み

    get:
      summary: 作品一覧を取得
      description: 指定されたお題に対する全作品を取得します。
      parameters:
        - name: theme_id
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: 作品一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Work"

  /works/{id}/like:
    post:
      summary: 共鳴（いいね）を送信
      description: 指定した作品に共鳴（いいね）を登録します。
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 登録成功
        "400":
          description: 不正リクエスト
        "409":
          description: 重複いいね

  /ranking:
    get:
      summary: 当日のランキングを取得
      description: Wilson信頼区間スコアで算出されたランキングを返します。
      parameters:
        - name: theme_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ランキング結果
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ranking"

  /sponsors:
    post:
      summary: スポンサー上の句登録
      description: 管理者／スポンサーが上の句を投稿します。
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company_name:
                  type: string
                text:
                  type: string
                category:
                  type: string
                budget:
                  type: number
              required: [company_name, text]
      responses:
        "201":
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time

    Theme:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        category:
          type: string
        date:
          type: string
          format: date

    Work:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        theme_id:
          type: string
        text:
          type: string
        created_at:
          type: string
          format: date-time
        likes_count:
          type: integer

    Ranking:
      type: object
      properties:
        rank:
          type: integer
        work_id:
          type: string
        score:
          type: number
        user_name:
          type: string
        text:
          type: string

    Sponsor:
      type: object
      properties:
        id:
          type: string
        company_name:
          type: string
        text:
          type: string
        category:
          type: string
        budget:
          type: number
        created_at:
          type: string
          format: date-time
